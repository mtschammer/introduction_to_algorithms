Question:
   Queue with two stacks. Implement a queue with two stacks so that each
   queue operations takes a constant amortized number of stack operations.

Answer:
    a1.length = n
    a2.length = 2n
    Fill up a1 as usual. When full, copy over to a2 beginning at 'current'
    and following until there are no more nodes. Reset and resize a1 so
    a1.length = 2 * a2.length. If a2 fill up, do the same in reverse.

    Similarly if active array shrinks to 25% full, resize other array to 50%
    and copy over.

1 4 9 2 3 4

1

4 1


--

Question:
    Stack with max. Create a data structure that efficiently supports the
    stack operations (push and pop) and also a return-the-maximum operation.
    Assume the elements are reals numbers so that you can compare them.

Answer:
    2 stacks. 1 for values, 1 for keeping track of index of node with max value:
    value stack:   6, 1, 9, 3, 199, 10, 2

    max val stack: 0, 0, 2, 2, 4, 4, 4


--

Question:
    Java generics. Explain why Java prohibits generic array creation.

Answer:
    Because arrays are reifiable and generics are not.